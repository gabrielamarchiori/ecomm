openapi: 3.0.3
info: 
  title: API ECOMM
  description: API que controla os produtos, categorias e vendas de uma loja, bem coomo mantém um cadastro de seus compradores.
  version: 0.0.1
  termsOfService: https://mockapi.io
  contact:
    name: Suporte a Devs
    email: contato@example.com
    url: https://mockapi.io
  license:
    name: "Licença: GPLv3"
    url: https://www.gnu.org/licenses/gpl-3.0.html
externalDocs:
  description: Documentação burocrática
  url: https://mockapi.io
servers: 
  - url: http://localhost:3000
    description: API ECOMM
paths:
  /api/categories:
    get:
      tags: 
        - categories
      summary: Busca todas as categorias dos produtos existentes na loja
      responses:
        200: 
          description: Sucesso
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Categories"
  /api/admin/categories:
    post:
      tags: 
        - categories
      summary: Cria nova Categoria
      description: "Através dessa endpoint você pode criar novas categorias"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome: 
                  type: string
      responses:
        201:
          description: "Sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
  /api/categories/{id}:
    parameters: 
    - name: id
      in: path
      schema:
        type: string
        format: objectId
      required: true
    get:
      tags: 
        - categories
      summary: Busca categoria pelo ID
      responses: 
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        '404':
          description: Categoria não encontrada
          content:
            application/json:
              example: "Categoria não encontrada"
    delete:
      security: 
      - auth: []
      tags: 
        - categories
      summary: Deleta categoria por ID
      responses:
        '204':
          description: Categoria deletada com sucesso
        '404':
          description: Categoria não encontrada
          content:
            application/json:
              example: "Categoria não encontrada"
    patch:
      security: 
      - auth: []
      tags: 
        - categories
      summary: Edita as categorias
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome: 
                  type: string
                status:
                  type: string
      responses:
        200:
          description: "Sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        '404':
          description: categoria não encontrada
          content:
            application/json:
              example: "categoria não encontrada"
  /api/products:
    post:
      security: 
        - auth: []
      tags:
        - products
      summary: Cria um novo produto
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome: 
                  type: string
                descricao:
                  type: string
                slug: 
                  type: string
                preco:
                  type: number
                  format: float
                estoque:
                  type: integer
                categoria:
                  type: string
                  format: ObjectId
      responses:
        201:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    get:
      tags:
        - products
      summary: Busca todos os produtos existentes na loja
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
  /api/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
        format: ObjectId
      required: true
    get:
      tags: 
        - products
      summary: Busca do produto pelo ID
      responses: 
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: Produto não encontrado
          content:
            application/json:
              example: "Produto não encontrado"
    patch:
      security: 
      - auth: []
      tags: 
        - products
      summary: Edita os produtos
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome: 
                  type: string
                descricao:
                  type: string
                slug: 
                  type: string
                preco:
                  type: number
                  format: float
                estoque:
                  type: integer
                categoria:
                  type: string
                  format: ObjectId
      responses:
        200:
          description: "Sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: Produto não encontrado
          content:
            application/json:
              example: "Produto não encontrado"
    delete:
      security: 
      - auth: []
      tags: 
        - products
      summary: Deleta produto por ID
      responses:
        '204':
          description: Produto deletado com sucesso
        '404':
          description: Produto não encontrada
          content:
            application/json:
              example: "Produto não encontrada"
  /api/users:
    post:
      security:
        - auth: []
      tags:
        - users
      summary: Cria novo usuário
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                email:
                  type: string
                senha:
                  type: string
                cpf:
                  type: string
                telefone:
                  type: string
                endereco:
                  type: object
                  properties:
                    bairro:
                      type: string
                    rua:
                      type: string
                    numero:
                      type: string
                    complemento:
                      type: string
                    cep:
                      type: string
                    cidade:
                      type: string
                    uf:
                      type: string
      responses:
        201:
          description: "Sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      security: 
        - auth: []
      tags:
        - users
      summary: Busca todos os usuários cadastrados na loja
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  /api/users/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
        format: ObjectId
      required: true
    get:
      tags:
        - users
      summary: Busca usuário pelo ID
      responses: 
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              example: "Usuário não encontrado"
    patch:
      security: 
        - auth: []
      tags:
        - users
      summary: Edita as informações do usuário
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                email:
                  type: string
                senha:
                  type: string
                cpf:
                  type: string
                telefone:
                  type: string
                endereco:
                  type: object
                  properties:
                    bairro:
                      type: string
                    rua:
                      type: string
                    numero:
                      type: string
                    complemento:
                      type: string
                    cep:
                      type: string
                    cidade:
                      type: string
                    uf:
                      type: string
      responses:
        200:
          description: "Sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              example: "Usuário não encontradp"
    delete:
      security:
        - auth: []
      tags:
        - users
      summary: Deleta usuário por ID
      responses:
        '204':
          description: Usuário deletado com sucesso
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              example: "Usuário não encontrado"
  /api/orders:
    post:
      tags:
        - orders
      summary: Cria um novo pedido
      description: "Através desse endpoint você pode criar novos pedidos"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account: 
                  type: object
                  properties:
                    accountId:
                      type: string
                      format: ObjectId
                enderecoEntrega:
                  type: object
                  properties:
                    rua:
                      type: string
                    numero:
                      type: string
                    complemento:
                      type: string
                    cep: 
                      type: string
                    cidade:
                      type: string
                    uf:
                      type: string
                itens:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        format: ObjectId
                      quantidade:
                        type: integer
                      desconto: 
                        type: number
                        format: double
                      precoUnitario: 
                        type: number
                        format: float
      responses:
        201:
          description: "Sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            
  /api/orders/{id}:
    parameters: 
    - name: id
      in: path
      schema:
        type: string
        format: objectId
      required: true
    get:
      tags:
        - orders
    
components:
  schemas:
    Category:
      type: object
      properties:
        id: 
          type: string
          format: objectId
        nome: 
          type: string
        status:
          type: string
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Product:
      type: object
      properties:
        id: 
          type: string
          format: objectId
        nome: 
          type: string
        descricao:
          type: string
        slug: 
          type: string
        preco:
          type: number
          format: float
        estoque:
          type: integer
        categoria:
          type: string
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    User:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
        nome:
          type: string
        email:
          type: string
        dataCriacao:
          type: string
          format: date-time
        cpf:
          type: string
        telefone:
          type: string
        endereco:
          type: object
          properties:
            bairro:
              type: string
            rua:
              type: string
            numero:
              type: string
            complemento:
              type: string
            cep:
              type: string
            cidade:
              type: string
            uf:
              type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Order:
      type: object
      properties:
        id: 
          type: string
          format: ObjectId
        dataPedido:
          type: string
          format: date-time
        account: 
          type: object
          properties:
            accountId:
              type: string
              format: ObjectId
            nome:
              type: string
        enderecoEntrega:
          type: object
          properties:
            bairro:
              type: string
            rua:
              type: string
            numero:
              type: string
            complemento:
              type: string
            cep: 
              type: string
            cidade:
              type: string
            uf:
              type: string
        itens:
          type: array
          items:
            type: object
            properties:
                productId:
                  type: string
                  format: ObjectId
                quantidade:
                  type: integer
                desconto: 
                  type: number
                  format: double
                precoUnitario: 
                  type: number
                  format: float
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT